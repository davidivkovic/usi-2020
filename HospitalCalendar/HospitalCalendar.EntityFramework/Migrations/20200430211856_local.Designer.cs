// <auto-generated />
using System;
using HospitalCalendar.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HospitalCalendar.EntityFramework.Migrations
{
    [DbContext(typeof(HospitalCalendarDbContext))]
    [Migration("20200430211856_local")]
    partial class local
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("HospitalCalendar.Domain.Models.Anamnesis", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("PatientID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("PatientID")
                        .IsUnique();

                    b.ToTable("Anamneses");
                });

            modelBuilder.Entity("HospitalCalendar.Domain.Models.AppointmentChangeRequest", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AppointmentID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("NewEndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("NewStartDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PreviousEndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PreviousStartDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("AppointmentID");

                    b.ToTable("AppointmentChangeRequests");
                });

            modelBuilder.Entity("HospitalCalendar.Domain.Models.AppointmentChangeRequestNotification", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AppointmentChangeRequestID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SecretaryID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("AppointmentChangeRequestID");

                    b.HasIndex("SecretaryID");

                    b.ToTable("AppointmentChangeRequestNotifications");
                });

            modelBuilder.Entity("HospitalCalendar.Domain.Models.AppointmentRequest", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<Guid?>("PatientID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProposedDoctorID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RequesterID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("PatientID");

                    b.HasIndex("ProposedDoctorID");

                    b.HasIndex("RequesterID");

                    b.ToTable("AppointmentRequests");
                });

            modelBuilder.Entity("HospitalCalendar.Domain.Models.AppointmentRequestNotification", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AppointmentRequestID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SecretaryID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("AppointmentRequestID");

                    b.HasIndex("SecretaryID");

                    b.ToTable("AppointmentRequestNotifications");
                });

            modelBuilder.Entity("HospitalCalendar.Domain.Models.CalendarEntry", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("RoomID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("RoomID");

                    b.ToTable("CalendarEntries");

                    b.HasDiscriminator<string>("Discriminator").HasValue("CalendarEntry");
                });

            modelBuilder.Entity("HospitalCalendar.Domain.Models.DoctorPatient", b =>
                {
                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DoctorId", "PatientId");

                    b.HasIndex("PatientId");

                    b.ToTable("DoctorsPatients");
                });

            modelBuilder.Entity("HospitalCalendar.Domain.Models.Entry", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AnamnesisID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DoctorID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.HasIndex("AnamnesisID");

                    b.HasIndex("DoctorID");

                    b.ToTable("Entries");
                });

            modelBuilder.Entity("HospitalCalendar.Domain.Models.EquipmentItem", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EquipmentTypeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("RenovationID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RenovationID1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RoomID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("EquipmentTypeID");

                    b.HasIndex("RenovationID");

                    b.HasIndex("RenovationID1");

                    b.HasIndex("RoomID");

                    b.ToTable("EquipmentItems");
                });

            modelBuilder.Entity("HospitalCalendar.Domain.Models.EquipmentType", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("EquipmentTypes");
                });

            modelBuilder.Entity("HospitalCalendar.Domain.Models.Room", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Floor")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("HospitalCalendar.Domain.Models.Specialization", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DoctorID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("SingleSpecialization")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("DoctorID");

                    b.ToTable("Specializations");
                });

            modelBuilder.Entity("HospitalCalendar.Domain.Models.SurgeryNotification", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SecretaryID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("SurgeryID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("SecretaryID");

                    b.HasIndex("SurgeryID");

                    b.ToTable("SurgeryNotifications");
                });

            modelBuilder.Entity("HospitalCalendar.Domain.Models.User", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasFilter("[Username] IS NOT NULL");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");
                });

            modelBuilder.Entity("HospitalCalendar.Domain.Models.Appointment", b =>
                {
                    b.HasBaseType("HospitalCalendar.Domain.Models.CalendarEntry");

                    b.Property<Guid?>("DoctorID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PatientID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("TypeID")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("DoctorID");

                    b.HasIndex("PatientID");

                    b.HasIndex("TypeID");

                    b.HasDiscriminator().HasValue("Appointment");
                });

            modelBuilder.Entity("HospitalCalendar.Domain.Models.Renovation", b =>
                {
                    b.HasBaseType("HospitalCalendar.Domain.Models.CalendarEntry");

                    b.Property<int>("NewRoomType")
                        .HasColumnType("int");

                    b.Property<Guid?>("RoomToAddID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Splitting")
                        .HasColumnType("bit");

                    b.HasIndex("RoomToAddID");

                    b.HasDiscriminator().HasValue("Renovation");
                });

            modelBuilder.Entity("HospitalCalendar.Domain.Models.Administrator", b =>
                {
                    b.HasBaseType("HospitalCalendar.Domain.Models.User");

                    b.HasDiscriminator().HasValue("Administrator");
                });

            modelBuilder.Entity("HospitalCalendar.Domain.Models.Doctor", b =>
                {
                    b.HasBaseType("HospitalCalendar.Domain.Models.User");

                    b.Property<TimeSpan>("WorkingHoursEnd")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("WorkingHoursStart")
                        .HasColumnType("time");

                    b.HasDiscriminator().HasValue("Doctor");
                });

            modelBuilder.Entity("HospitalCalendar.Domain.Models.Manager", b =>
                {
                    b.HasBaseType("HospitalCalendar.Domain.Models.User");

                    b.HasDiscriminator().HasValue("Manager");
                });

            modelBuilder.Entity("HospitalCalendar.Domain.Models.Patient", b =>
                {
                    b.HasBaseType("HospitalCalendar.Domain.Models.User");

                    b.Property<string>("InsuranceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Sex")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Patient");
                });

            modelBuilder.Entity("HospitalCalendar.Domain.Models.Secretary", b =>
                {
                    b.HasBaseType("HospitalCalendar.Domain.Models.User");

                    b.HasDiscriminator().HasValue("Secretary");
                });

            modelBuilder.Entity("HospitalCalendar.Domain.Models.Surgery", b =>
                {
                    b.HasBaseType("HospitalCalendar.Domain.Models.Appointment");

                    b.Property<bool>("IsUrgent")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue("Surgery");
                });

            modelBuilder.Entity("HospitalCalendar.Domain.Models.Anamnesis", b =>
                {
                    b.HasOne("HospitalCalendar.Domain.Models.Patient", "Patient")
                        .WithOne("Anamnesis")
                        .HasForeignKey("HospitalCalendar.Domain.Models.Anamnesis", "PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalCalendar.Domain.Models.AppointmentChangeRequest", b =>
                {
                    b.HasOne("HospitalCalendar.Domain.Models.Appointment", "Appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentID");
                });

            modelBuilder.Entity("HospitalCalendar.Domain.Models.AppointmentChangeRequestNotification", b =>
                {
                    b.HasOne("HospitalCalendar.Domain.Models.AppointmentChangeRequest", "AppointmentChangeRequest")
                        .WithMany()
                        .HasForeignKey("AppointmentChangeRequestID");

                    b.HasOne("HospitalCalendar.Domain.Models.Secretary", null)
                        .WithMany("AppointmentChangeRequestNotifications")
                        .HasForeignKey("SecretaryID");
                });

            modelBuilder.Entity("HospitalCalendar.Domain.Models.AppointmentRequest", b =>
                {
                    b.HasOne("HospitalCalendar.Domain.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientID");

                    b.HasOne("HospitalCalendar.Domain.Models.Doctor", "ProposedDoctor")
                        .WithMany()
                        .HasForeignKey("ProposedDoctorID");

                    b.HasOne("HospitalCalendar.Domain.Models.Doctor", "Requester")
                        .WithMany()
                        .HasForeignKey("RequesterID");
                });

            modelBuilder.Entity("HospitalCalendar.Domain.Models.AppointmentRequestNotification", b =>
                {
                    b.HasOne("HospitalCalendar.Domain.Models.AppointmentRequest", "AppointmentRequest")
                        .WithMany()
                        .HasForeignKey("AppointmentRequestID");

                    b.HasOne("HospitalCalendar.Domain.Models.Secretary", null)
                        .WithMany("AppointmentRequestNotifications")
                        .HasForeignKey("SecretaryID");
                });

            modelBuilder.Entity("HospitalCalendar.Domain.Models.CalendarEntry", b =>
                {
                    b.HasOne("HospitalCalendar.Domain.Models.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomID");
                });

            modelBuilder.Entity("HospitalCalendar.Domain.Models.DoctorPatient", b =>
                {
                    b.HasOne("HospitalCalendar.Domain.Models.Doctor", "Doctor")
                        .WithMany("DoctorsPatients")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HospitalCalendar.Domain.Models.Patient", "Patient")
                        .WithMany("DoctorsPatients")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalCalendar.Domain.Models.Entry", b =>
                {
                    b.HasOne("HospitalCalendar.Domain.Models.Anamnesis", "Anamnesis")
                        .WithMany("Entries")
                        .HasForeignKey("AnamnesisID");

                    b.HasOne("HospitalCalendar.Domain.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorID");
                });

            modelBuilder.Entity("HospitalCalendar.Domain.Models.EquipmentItem", b =>
                {
                    b.HasOne("HospitalCalendar.Domain.Models.EquipmentType", "EquipmentType")
                        .WithMany()
                        .HasForeignKey("EquipmentTypeID");

                    b.HasOne("HospitalCalendar.Domain.Models.Renovation", null)
                        .WithMany("AddedEquipmentItems")
                        .HasForeignKey("RenovationID");

                    b.HasOne("HospitalCalendar.Domain.Models.Renovation", null)
                        .WithMany("RemovedEquipmentItems")
                        .HasForeignKey("RenovationID1");

                    b.HasOne("HospitalCalendar.Domain.Models.Room", "Room")
                        .WithMany("Equipment")
                        .HasForeignKey("RoomID");
                });

            modelBuilder.Entity("HospitalCalendar.Domain.Models.Specialization", b =>
                {
                    b.HasOne("HospitalCalendar.Domain.Models.Doctor", null)
                        .WithMany("Specializations")
                        .HasForeignKey("DoctorID");
                });

            modelBuilder.Entity("HospitalCalendar.Domain.Models.SurgeryNotification", b =>
                {
                    b.HasOne("HospitalCalendar.Domain.Models.Secretary", null)
                        .WithMany("SurgeryNotifications")
                        .HasForeignKey("SecretaryID");

                    b.HasOne("HospitalCalendar.Domain.Models.Surgery", "Surgery")
                        .WithMany()
                        .HasForeignKey("SurgeryID");
                });

            modelBuilder.Entity("HospitalCalendar.Domain.Models.Appointment", b =>
                {
                    b.HasOne("HospitalCalendar.Domain.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorID");

                    b.HasOne("HospitalCalendar.Domain.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientID");

                    b.HasOne("HospitalCalendar.Domain.Models.Specialization", "Type")
                        .WithMany()
                        .HasForeignKey("TypeID");
                });

            modelBuilder.Entity("HospitalCalendar.Domain.Models.Renovation", b =>
                {
                    b.HasOne("HospitalCalendar.Domain.Models.Room", "RoomToAdd")
                        .WithMany()
                        .HasForeignKey("RoomToAddID");
                });
#pragma warning restore 612, 618
        }
    }
}
